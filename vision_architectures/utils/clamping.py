# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utils/07_clampling.ipynb.

# %% auto 0
__all__ = ['symmetric_tanh_clamp']

# %% ../../nbs/utils/07_clampling.ipynb 2
import torch

# %% ../../nbs/utils/07_clampling.ipynb 5
def symmetric_tanh_clamp(x: torch.tensor, max_value: float) -> torch.tensor:
    """
    Clamps the input tensor to the range [-max_value, max_value] using tanh while keeping it differentiable.

    Parameters:
        x: The input tensor to be clamped.
        max_value: The maximum absolute value to clamp to. Defaults to 1.0.

    Returns:
        Clamped differentiable tensor.
    """
    # Ensure max value is positive and greater than 0
    max_value = abs(max_value)
    if max_value == 0:
        raise ValueError("max_value must be greater than 0")

    # Clamp
    clamped_x = max_value * torch.tanh(x / max_value)
    return clamped_x
