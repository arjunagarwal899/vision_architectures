# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utils/04_custom_base_model.ipynb.

# %% auto 0
__all__ = ['CustomBaseModel']

# %% ../../nbs/utils/04_custom_base_model.ipynb 2
from typing import Any

from pydantic import BaseModel, ConfigDict, Field, computed_field, model_validator  # noqa: F401

# %% ../../nbs/utils/04_custom_base_model.ipynb 4
class CustomBaseModel(BaseModel):
    model_config = ConfigDict(
        arbitrary_types_allowed=True,
        extra="ignore",
        validate_default=True,
        validate_assignment=True,
        validate_return=True,
    )

    def get(self, key: str, default: Any = None) -> Any:
        """Returns the value of the key if it exists, otherwise returns the default value."""
        return getattr(self, key, default)

    @model_validator(mode="before")
    @classmethod
    def validate_before(cls, data):
        """Base class method for validating data before creating the model."""
        return data

    @model_validator(mode="after")
    def validate(self):
        """Base class method for validating the model after creation."""
        return self

    def __contains__(self, key):
        return key in self.model_fields

    def __or__(self, other: dict):
        if not isinstance(other, dict):
            raise TypeError(f"Cannot merge object of type {type(other)} with {self.__class__.__name__}")
        updated = self.model_copy(update=other, deep=True)  # Pydantic v2 way of updating fields
        return updated
