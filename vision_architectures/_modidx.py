# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/vision_architectures',
                'doc_host': 'https://arjunagarwal899.github.io',
                'git_url': 'https://github.com/arjunagarwal899/vision_architectures',
                'lib_path': 'vision_architectures'},
  'syms': { 'vision_architectures.blocks.cnn': { 'vision_architectures.blocks.cnn.CNNBlock3D': ( 'blocks/cnn.html#cnnblock3d',
                                                                                                 'vision_architectures/blocks/cnn.py'),
                                                 'vision_architectures.blocks.cnn.CNNBlock3D.__init__': ( 'blocks/cnn.html#cnnblock3d.__init__',
                                                                                                          'vision_architectures/blocks/cnn.py'),
                                                 'vision_architectures.blocks.cnn.CNNBlock3D._forward': ( 'blocks/cnn.html#cnnblock3d._forward',
                                                                                                          'vision_architectures/blocks/cnn.py'),
                                                 'vision_architectures.blocks.cnn.CNNBlock3D.forward': ( 'blocks/cnn.html#cnnblock3d.forward',
                                                                                                         'vision_architectures/blocks/cnn.py'),
                                                 'vision_architectures.blocks.cnn.CNNBlockConfig': ( 'blocks/cnn.html#cnnblockconfig',
                                                                                                     'vision_architectures/blocks/cnn.py'),
                                                 'vision_architectures.blocks.cnn.CNNBlockConfig.validate': ( 'blocks/cnn.html#cnnblockconfig.validate',
                                                                                                              'vision_architectures/blocks/cnn.py'),
                                                 'vision_architectures.blocks.cnn.MultiResCNNBlock3D': ( 'blocks/cnn.html#multirescnnblock3d',
                                                                                                         'vision_architectures/blocks/cnn.py'),
                                                 'vision_architectures.blocks.cnn.MultiResCNNBlock3D.__init__': ( 'blocks/cnn.html#multirescnnblock3d.__init__',
                                                                                                                  'vision_architectures/blocks/cnn.py'),
                                                 'vision_architectures.blocks.cnn.MultiResCNNBlock3D._forward': ( 'blocks/cnn.html#multirescnnblock3d._forward',
                                                                                                                  'vision_architectures/blocks/cnn.py'),
                                                 'vision_architectures.blocks.cnn.MultiResCNNBlock3D.forward': ( 'blocks/cnn.html#multirescnnblock3d.forward',
                                                                                                                 'vision_architectures/blocks/cnn.py'),
                                                 'vision_architectures.blocks.cnn.MultiResCNNBlockConfig': ( 'blocks/cnn.html#multirescnnblockconfig',
                                                                                                             'vision_architectures/blocks/cnn.py'),
                                                 'vision_architectures.blocks.cnn.MultiResCNNBlockConfig.scale_filter_ratios': ( 'blocks/cnn.html#multirescnnblockconfig.scale_filter_ratios',
                                                                                                                                 'vision_architectures/blocks/cnn.py'),
                                                 'vision_architectures.blocks.cnn.MultiResCNNBlockConfig.validate': ( 'blocks/cnn.html#multirescnnblockconfig.validate',
                                                                                                                      'vision_architectures/blocks/cnn.py')},
            'vision_architectures.blocks.heads_3d': { 'vision_architectures.blocks.heads_3d.ClassificationHead3D': ( 'blocks/heads_3d.html#classificationhead3d',
                                                                                                                     'vision_architectures/blocks/heads_3d.py'),
                                                      'vision_architectures.blocks.heads_3d.ClassificationHead3D.__init__': ( 'blocks/heads_3d.html#classificationhead3d.__init__',
                                                                                                                              'vision_architectures/blocks/heads_3d.py'),
                                                      'vision_architectures.blocks.heads_3d.SegmentationHead3D': ( 'blocks/heads_3d.html#segmentationhead3d',
                                                                                                                   'vision_architectures/blocks/heads_3d.py'),
                                                      'vision_architectures.blocks.heads_3d.SegmentationHead3D.__init__': ( 'blocks/heads_3d.html#segmentationhead3d.__init__',
                                                                                                                            'vision_architectures/blocks/heads_3d.py')},
            'vision_architectures.blocks.mbconv_3d': { 'vision_architectures.blocks.mbconv_3d.MBConv3D': ( 'blocks/mbconv_3d.html#mbconv3d',
                                                                                                           'vision_architectures/blocks/mbconv_3d.py'),
                                                       'vision_architectures.blocks.mbconv_3d.MBConv3D.__init__': ( 'blocks/mbconv_3d.html#mbconv3d.__init__',
                                                                                                                    'vision_architectures/blocks/mbconv_3d.py'),
                                                       'vision_architectures.blocks.mbconv_3d.MBConv3D._forward': ( 'blocks/mbconv_3d.html#mbconv3d._forward',
                                                                                                                    'vision_architectures/blocks/mbconv_3d.py'),
                                                       'vision_architectures.blocks.mbconv_3d.MBConv3D.forward': ( 'blocks/mbconv_3d.html#mbconv3d.forward',
                                                                                                                   'vision_architectures/blocks/mbconv_3d.py'),
                                                       'vision_architectures.blocks.mbconv_3d.MBConv3DConfig': ( 'blocks/mbconv_3d.html#mbconv3dconfig',
                                                                                                                 'vision_architectures/blocks/mbconv_3d.py'),
                                                       'vision_architectures.blocks.mbconv_3d.MBConv3DConfig.hidden_dim': ( 'blocks/mbconv_3d.html#mbconv3dconfig.hidden_dim',
                                                                                                                            'vision_architectures/blocks/mbconv_3d.py'),
                                                       'vision_architectures.blocks.mbconv_3d.MBConv3DConfig.validate': ( 'blocks/mbconv_3d.html#mbconv3dconfig.validate',
                                                                                                                          'vision_architectures/blocks/mbconv_3d.py'),
                                                       'vision_architectures.blocks.mbconv_3d.MBConv3DConfig.validate_before': ( 'blocks/mbconv_3d.html#mbconv3dconfig.validate_before',
                                                                                                                                 'vision_architectures/blocks/mbconv_3d.py')},
            'vision_architectures.blocks.se': { 'vision_architectures.blocks.se.SEBlock3D': ( 'blocks/se_3d.html#seblock3d',
                                                                                              'vision_architectures/blocks/se.py'),
                                                'vision_architectures.blocks.se.SEBlock3D.__init__': ( 'blocks/se_3d.html#seblock3d.__init__',
                                                                                                       'vision_architectures/blocks/se.py'),
                                                'vision_architectures.blocks.se.SEBlock3D._forward': ( 'blocks/se_3d.html#seblock3d._forward',
                                                                                                       'vision_architectures/blocks/se.py'),
                                                'vision_architectures.blocks.se.SEBlock3D.forward': ( 'blocks/se_3d.html#seblock3d.forward',
                                                                                                      'vision_architectures/blocks/se.py'),
                                                'vision_architectures.blocks.se.SEBlock3DConfig': ( 'blocks/se_3d.html#seblock3dconfig',
                                                                                                    'vision_architectures/blocks/se.py')},
            'vision_architectures.blocks.transformer': { 'vision_architectures.blocks.transformer.Attention1DMLP': ( 'blocks/transformer.html#attention1dmlp',
                                                                                                                     'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention1DMLP.__init__': ( 'blocks/transformer.html#attention1dmlp.__init__',
                                                                                                                              'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention1DMLP._forward': ( 'blocks/transformer.html#attention1dmlp._forward',
                                                                                                                              'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention1DMLP.forward': ( 'blocks/transformer.html#attention1dmlp.forward',
                                                                                                                             'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention1DMLPConfig': ( 'blocks/transformer.html#attention1dmlpconfig',
                                                                                                                           'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention1DWithMLP': ( 'blocks/transformer.html#attention1dwithmlp',
                                                                                                                         'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention1DWithMLP.__init__': ( 'blocks/transformer.html#attention1dwithmlp.__init__',
                                                                                                                                  'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention1DWithMLP._forward': ( 'blocks/transformer.html#attention1dwithmlp._forward',
                                                                                                                                  'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention1DWithMLP.forward': ( 'blocks/transformer.html#attention1dwithmlp.forward',
                                                                                                                                 'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention1DWithMLPConfig': ( 'blocks/transformer.html#attention1dwithmlpconfig',
                                                                                                                               'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention3DMLP': ( 'blocks/transformer.html#attention3dmlp',
                                                                                                                     'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention3DMLP.__init__': ( 'blocks/transformer.html#attention3dmlp.__init__',
                                                                                                                              'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention3DMLP._forward': ( 'blocks/transformer.html#attention3dmlp._forward',
                                                                                                                              'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention3DMLP.forward': ( 'blocks/transformer.html#attention3dmlp.forward',
                                                                                                                             'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention3DMLPConfig': ( 'blocks/transformer.html#attention3dmlpconfig',
                                                                                                                           'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention3DWithMLP': ( 'blocks/transformer.html#attention3dwithmlp',
                                                                                                                         'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention3DWithMLP.__init__': ( 'blocks/transformer.html#attention3dwithmlp.__init__',
                                                                                                                                  'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention3DWithMLP._forward': ( 'blocks/transformer.html#attention3dwithmlp._forward',
                                                                                                                                  'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention3DWithMLP.forward': ( 'blocks/transformer.html#attention3dwithmlp.forward',
                                                                                                                                 'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.Attention3DWithMLPConfig': ( 'blocks/transformer.html#attention3dwithmlpconfig',
                                                                                                                               'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.TransformerDecoderBlock1D': ( 'blocks/transformer.html#transformerdecoderblock1d',
                                                                                                                                'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.TransformerDecoderBlock1D.__init__': ( 'blocks/transformer.html#transformerdecoderblock1d.__init__',
                                                                                                                                         'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.TransformerDecoderBlock1D._forward': ( 'blocks/transformer.html#transformerdecoderblock1d._forward',
                                                                                                                                         'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.TransformerDecoderBlock1D.forward': ( 'blocks/transformer.html#transformerdecoderblock1d.forward',
                                                                                                                                        'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.TransformerDecoderBlock3D': ( 'blocks/transformer.html#transformerdecoderblock3d',
                                                                                                                                'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.TransformerDecoderBlock3D.__init__': ( 'blocks/transformer.html#transformerdecoderblock3d.__init__',
                                                                                                                                         'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.TransformerDecoderBlock3D._forward': ( 'blocks/transformer.html#transformerdecoderblock3d._forward',
                                                                                                                                         'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.TransformerDecoderBlock3D.forward': ( 'blocks/transformer.html#transformerdecoderblock3d.forward',
                                                                                                                                        'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.TransformerEncoderBlock1D': ( 'blocks/transformer.html#transformerencoderblock1d',
                                                                                                                                'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.TransformerEncoderBlock1D.forward': ( 'blocks/transformer.html#transformerencoderblock1d.forward',
                                                                                                                                        'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.TransformerEncoderBlock3D': ( 'blocks/transformer.html#transformerencoderblock3d',
                                                                                                                                'vision_architectures/blocks/transformer.py'),
                                                         'vision_architectures.blocks.transformer.TransformerEncoderBlock3D.forward': ( 'blocks/transformer.html#transformerencoderblock3d.forward',
                                                                                                                                        'vision_architectures/blocks/transformer.py')},
            'vision_architectures.docstrings': { 'vision_architectures.docstrings.populate_docstring': ( 'docstrings.html#populate_docstring',
                                                                                                         'vision_architectures/docstrings.py')},
            'vision_architectures.image_readers.safetensors_reader': { 'vision_architectures.image_readers.safetensors_reader.SafetensorsReader': ( 'image_readers/safetensors_reader.html#safetensorsreader',
                                                                                                                                                    'vision_architectures/image_readers/safetensors_reader.py'),
                                                                       'vision_architectures.image_readers.safetensors_reader.SafetensorsReader.__init__': ( 'image_readers/safetensors_reader.html#safetensorsreader.__init__',
                                                                                                                                                             'vision_architectures/image_readers/safetensors_reader.py'),
                                                                       'vision_architectures.image_readers.safetensors_reader.SafetensorsReader._spacing_to_affine': ( 'image_readers/safetensors_reader.html#safetensorsreader._spacing_to_affine',
                                                                                                                                                                       'vision_architectures/image_readers/safetensors_reader.py'),
                                                                       'vision_architectures.image_readers.safetensors_reader.SafetensorsReader.get_data': ( 'image_readers/safetensors_reader.html#safetensorsreader.get_data',
                                                                                                                                                             'vision_architectures/image_readers/safetensors_reader.py'),
                                                                       'vision_architectures.image_readers.safetensors_reader.SafetensorsReader.read': ( 'image_readers/safetensors_reader.html#safetensorsreader.read',
                                                                                                                                                         'vision_architectures/image_readers/safetensors_reader.py'),
                                                                       'vision_architectures.image_readers.safetensors_reader.SafetensorsReader.verify_suffix': ( 'image_readers/safetensors_reader.html#safetensorsreader.verify_suffix',
                                                                                                                                                                  'vision_architectures/image_readers/safetensors_reader.py')},
            'vision_architectures.layers.attention': { 'vision_architectures.layers.attention.Attention1D': ( 'layers/attention.html#attention1d',
                                                                                                              'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention1D.__init__': ( 'layers/attention.html#attention1d.__init__',
                                                                                                                       'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention1D._forward': ( 'layers/attention.html#attention1d._forward',
                                                                                                                       'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention1D.forward': ( 'layers/attention.html#attention1d.forward',
                                                                                                                      'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention1DConfig': ( 'layers/attention.html#attention1dconfig',
                                                                                                                    'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention1DConfig.dim_qk': ( 'layers/attention.html#attention1dconfig.dim_qk',
                                                                                                                           'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention1DConfig.dim_v': ( 'layers/attention.html#attention1dconfig.dim_v',
                                                                                                                          'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention1DConfig.gqa_mqa_enabled': ( 'layers/attention.html#attention1dconfig.gqa_mqa_enabled',
                                                                                                                                    'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention1DConfig.num_kv_heads': ( 'layers/attention.html#attention1dconfig.num_kv_heads',
                                                                                                                                 'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention1DConfig.num_q_heads': ( 'layers/attention.html#attention1dconfig.num_q_heads',
                                                                                                                                'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention1DConfig.per_head_dim_qk': ( 'layers/attention.html#attention1dconfig.per_head_dim_qk',
                                                                                                                                    'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention1DConfig.validate': ( 'layers/attention.html#attention1dconfig.validate',
                                                                                                                             'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention3D': ( 'layers/attention.html#attention3d',
                                                                                                              'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention3D.__init__': ( 'layers/attention.html#attention3d.__init__',
                                                                                                                       'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention3D._forward': ( 'layers/attention.html#attention3d._forward',
                                                                                                                       'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention3D.forward': ( 'layers/attention.html#attention3d.forward',
                                                                                                                      'vision_architectures/layers/attention.py'),
                                                       'vision_architectures.layers.attention.Attention3DConfig': ( 'layers/attention.html#attention3dconfig',
                                                                                                                    'vision_architectures/layers/attention.py')},
            'vision_architectures.layers.codebook': { 'vision_architectures.layers.codebook.Codebook': ( 'layers/codebook.html#codebook',
                                                                                                         'vision_architectures/layers/codebook.py'),
                                                      'vision_architectures.layers.codebook.Codebook.__init__': ( 'layers/codebook.html#codebook.__init__',
                                                                                                                  'vision_architectures/layers/codebook.py'),
                                                      'vision_architectures.layers.codebook.Codebook._estimate_codebook_distance': ( 'layers/codebook.html#codebook._estimate_codebook_distance',
                                                                                                                                     'vision_architectures/layers/codebook.py'),
                                                      'vision_architectures.layers.codebook.Codebook._initialize_generator': ( 'layers/codebook.html#codebook._initialize_generator',
                                                                                                                               'vision_architectures/layers/codebook.py'),
                                                      'vision_architectures.layers.codebook.Codebook._one_hot_indices': ( 'layers/codebook.html#codebook._one_hot_indices',
                                                                                                                          'vision_architectures/layers/codebook.py'),
                                                      'vision_architectures.layers.codebook.Codebook._perform_ema': ( 'layers/codebook.html#codebook._perform_ema',
                                                                                                                      'vision_architectures/layers/codebook.py'),
                                                      'vision_architectures.layers.codebook.Codebook._update_counters': ( 'layers/codebook.html#codebook._update_counters',
                                                                                                                          'vision_architectures/layers/codebook.py'),
                                                      'vision_architectures.layers.codebook.Codebook.calculate_losses': ( 'layers/codebook.html#codebook.calculate_losses',
                                                                                                                          'vision_architectures/layers/codebook.py'),
                                                      'vision_architectures.layers.codebook.Codebook.calculate_perplexity': ( 'layers/codebook.html#codebook.calculate_perplexity',
                                                                                                                              'vision_architectures/layers/codebook.py'),
                                                      'vision_architectures.layers.codebook.Codebook.forward': ( 'layers/codebook.html#codebook.forward',
                                                                                                                 'vision_architectures/layers/codebook.py'),
                                                      'vision_architectures.layers.codebook.Codebook.quantize': ( 'layers/codebook.html#codebook.quantize',
                                                                                                                  'vision_architectures/layers/codebook.py'),
                                                      'vision_architectures.layers.codebook.Codebook.revive_dead_vectors': ( 'layers/codebook.html#codebook.revive_dead_vectors',
                                                                                                                             'vision_architectures/layers/codebook.py'),
                                                      'vision_architectures.layers.codebook.CodebookConfig': ( 'layers/codebook.html#codebookconfig',
                                                                                                               'vision_architectures/layers/codebook.py')},
            'vision_architectures.layers.embeddings': { 'vision_architectures.layers.embeddings.AbsolutePositionEmbeddings1D': ( 'layers/embeddings.html#absolutepositionembeddings1d',
                                                                                                                                 'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.AbsolutePositionEmbeddings1D.__init__': ( 'layers/embeddings.html#absolutepositionembeddings1d.__init__',
                                                                                                                                          'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.AbsolutePositionEmbeddings1D.forward': ( 'layers/embeddings.html#absolutepositionembeddings1d.forward',
                                                                                                                                         'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.AbsolutePositionEmbeddings1DConfig': ( 'layers/embeddings.html#absolutepositionembeddings1dconfig',
                                                                                                                                       'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.AbsolutePositionEmbeddings1DConfig.validate': ( 'layers/embeddings.html#absolutepositionembeddings1dconfig.validate',
                                                                                                                                                'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.AbsolutePositionEmbeddings3D': ( 'layers/embeddings.html#absolutepositionembeddings3d',
                                                                                                                                 'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.AbsolutePositionEmbeddings3D.__init__': ( 'layers/embeddings.html#absolutepositionembeddings3d.__init__',
                                                                                                                                          'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.AbsolutePositionEmbeddings3D.forward': ( 'layers/embeddings.html#absolutepositionembeddings3d.forward',
                                                                                                                                         'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.AbsolutePositionEmbeddings3DConfig': ( 'layers/embeddings.html#absolutepositionembeddings3dconfig',
                                                                                                                                       'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.AbsolutePositionEmbeddings3DConfig.num_patches': ( 'layers/embeddings.html#absolutepositionembeddings3dconfig.num_patches',
                                                                                                                                                   'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.AbsolutePositionEmbeddings3DConfig.validate': ( 'layers/embeddings.html#absolutepositionembeddings3dconfig.validate',
                                                                                                                                                'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.AbsolutePositionEmbeddings3DConfig.validate_before': ( 'layers/embeddings.html#absolutepositionembeddings3dconfig.validate_before',
                                                                                                                                                       'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.PatchEmbeddings3D': ( 'layers/embeddings.html#patchembeddings3d',
                                                                                                                      'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.PatchEmbeddings3D.__init__': ( 'layers/embeddings.html#patchembeddings3d.__init__',
                                                                                                                               'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.PatchEmbeddings3DConfig': ( 'layers/embeddings.html#patchembeddings3dconfig',
                                                                                                                            'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.PatchEmbeddings3DConfig.validate_before': ( 'layers/embeddings.html#patchembeddings3dconfig.validate_before',
                                                                                                                                            'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.RelativePositionEmbeddings3D': ( 'layers/embeddings.html#relativepositionembeddings3d',
                                                                                                                                 'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.RelativePositionEmbeddings3D.__init__': ( 'layers/embeddings.html#relativepositionembeddings3d.__init__',
                                                                                                                                          'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.RelativePositionEmbeddings3D.forward': ( 'layers/embeddings.html#relativepositionembeddings3d.forward',
                                                                                                                                         'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.RelativePositionEmbeddings3DConfig': ( 'layers/embeddings.html#relativepositionembeddings3dconfig',
                                                                                                                                       'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.RelativePositionEmbeddings3DConfig.num_patches': ( 'layers/embeddings.html#relativepositionembeddings3dconfig.num_patches',
                                                                                                                                                   'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.RelativePositionEmbeddings3DConfig.validate': ( 'layers/embeddings.html#relativepositionembeddings3dconfig.validate',
                                                                                                                                                'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.RelativePositionEmbeddings3DConfig.validate_before': ( 'layers/embeddings.html#relativepositionembeddings3dconfig.validate_before',
                                                                                                                                                       'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.RelativePositionEmbeddings3DMetaNetwork': ( 'layers/embeddings.html#relativepositionembeddings3dmetanetwork',
                                                                                                                                            'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.RelativePositionEmbeddings3DMetaNetwork.__init__': ( 'layers/embeddings.html#relativepositionembeddings3dmetanetwork.__init__',
                                                                                                                                                     'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.RelativePositionEmbeddings3DMetaNetwork.forward': ( 'layers/embeddings.html#relativepositionembeddings3dmetanetwork.forward',
                                                                                                                                                    'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.RelativePositionEmbeddings3DMetaNetwork.get_relative_position_embeddings_table': ( 'layers/embeddings.html#relativepositionembeddings3dmetanetwork.get_relative_position_embeddings_table',
                                                                                                                                                                                   'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.get_absolute_embeddings_1d': ( 'layers/embeddings.html#get_absolute_embeddings_1d',
                                                                                                                               'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.get_absolute_position_embeddings_3d': ( 'layers/embeddings.html#get_absolute_position_embeddings_3d',
                                                                                                                                        'vision_architectures/layers/embeddings.py'),
                                                        'vision_architectures.layers.embeddings.get_coords_grid': ( 'layers/embeddings.html#get_coords_grid',
                                                                                                                    'vision_architectures/layers/embeddings.py')},
            'vision_architectures.layers.latent_space': { 'vision_architectures.layers.latent_space.GaussianLatentSpace': ( 'layers/latent_space.html#gaussianlatentspace',
                                                                                                                            'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.GaussianLatentSpace.__init__': ( 'layers/latent_space.html#gaussianlatentspace.__init__',
                                                                                                                                     'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.GaussianLatentSpace.forward': ( 'layers/latent_space.html#gaussianlatentspace.forward',
                                                                                                                                    'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.GaussianLatentSpace.kl_divergence': ( 'layers/latent_space.html#gaussianlatentspace.kl_divergence',
                                                                                                                                          'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.GaussianLatentSpace.sample': ( 'layers/latent_space.html#gaussianlatentspace.sample',
                                                                                                                                   'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.GaussianLatentSpaceConfig': ( 'layers/latent_space.html#gaussianlatentspaceconfig',
                                                                                                                                  'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentDecoder': ( 'layers/latent_space.html#latentdecoder',
                                                                                                                      'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentDecoder.__init__': ( 'layers/latent_space.html#latentdecoder.__init__',
                                                                                                                               'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentDecoder.forward': ( 'layers/latent_space.html#latentdecoder.forward',
                                                                                                                              'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentDecoderConfig': ( 'layers/latent_space.html#latentdecoderconfig',
                                                                                                                            'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentDecoderConfig.dim': ( 'layers/latent_space.html#latentdecoderconfig.dim',
                                                                                                                                'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentDecoderConfig.latent_dim': ( 'layers/latent_space.html#latentdecoderconfig.latent_dim',
                                                                                                                                       'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentDecoderConfig.validate_before': ( 'layers/latent_space.html#latentdecoderconfig.validate_before',
                                                                                                                                            'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentEncoder': ( 'layers/latent_space.html#latentencoder',
                                                                                                                      'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentEncoder.__init__': ( 'layers/latent_space.html#latentencoder.__init__',
                                                                                                                               'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentEncoder.forward': ( 'layers/latent_space.html#latentencoder.forward',
                                                                                                                              'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentEncoder.init_low_var': ( 'layers/latent_space.html#latentencoder.init_low_var',
                                                                                                                                   'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentEncoderConfig': ( 'layers/latent_space.html#latentencoderconfig',
                                                                                                                            'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentEncoderConfig.dim': ( 'layers/latent_space.html#latentencoderconfig.dim',
                                                                                                                                'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentEncoderConfig.latent_dim': ( 'layers/latent_space.html#latentencoderconfig.latent_dim',
                                                                                                                                       'vision_architectures/layers/latent_space.py'),
                                                          'vision_architectures.layers.latent_space.LatentEncoderConfig.validate_before': ( 'layers/latent_space.html#latentencoderconfig.validate_before',
                                                                                                                                            'vision_architectures/layers/latent_space.py')},
            'vision_architectures.layers.scale': { 'vision_architectures.layers.scale.PixelShuffleDownsample3D': ( 'layers/scale.html#pixelshuffledownsample3d',
                                                                                                                   'vision_architectures/layers/scale.py'),
                                                   'vision_architectures.layers.scale.PixelShuffleDownsample3D.__init__': ( 'layers/scale.html#pixelshuffledownsample3d.__init__',
                                                                                                                            'vision_architectures/layers/scale.py'),
                                                   'vision_architectures.layers.scale.PixelShuffleDownsample3D._forward': ( 'layers/scale.html#pixelshuffledownsample3d._forward',
                                                                                                                            'vision_architectures/layers/scale.py'),
                                                   'vision_architectures.layers.scale.PixelShuffleDownsample3D.forward': ( 'layers/scale.html#pixelshuffledownsample3d.forward',
                                                                                                                           'vision_architectures/layers/scale.py'),
                                                   'vision_architectures.layers.scale.PixelShuffleScaleConfig': ( 'layers/scale.html#pixelshufflescaleconfig',
                                                                                                                  'vision_architectures/layers/scale.py'),
                                                   'vision_architectures.layers.scale.PixelShuffleUpsample3D': ( 'layers/scale.html#pixelshuffleupsample3d',
                                                                                                                 'vision_architectures/layers/scale.py'),
                                                   'vision_architectures.layers.scale.PixelShuffleUpsample3D.__init__': ( 'layers/scale.html#pixelshuffleupsample3d.__init__',
                                                                                                                          'vision_architectures/layers/scale.py'),
                                                   'vision_architectures.layers.scale.PixelShuffleUpsample3D._forward': ( 'layers/scale.html#pixelshuffleupsample3d._forward',
                                                                                                                          'vision_architectures/layers/scale.py'),
                                                   'vision_architectures.layers.scale.PixelShuffleUpsample3D.forward': ( 'layers/scale.html#pixelshuffleupsample3d.forward',
                                                                                                                         'vision_architectures/layers/scale.py')},
            'vision_architectures.nets.cait_3d': { 'vision_architectures.nets.cait_3d.CaiT3DAttentionLayer': ( 'nets/cait_3d.html#cait3dattentionlayer',
                                                                                                               'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DAttentionLayer.__init__': ( 'nets/cait_3d.html#cait3dattentionlayer.__init__',
                                                                                                                        'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DAttentionLayer.forward': ( 'nets/cait_3d.html#cait3dattentionlayer.forward',
                                                                                                                       'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DConfig': ( 'nets/cait_3d.html#cait3dconfig',
                                                                                                       'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DModel': ( 'nets/cait_3d.html#cait3dmodel',
                                                                                                      'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DModel.__init__': ( 'nets/cait_3d.html#cait3dmodel.__init__',
                                                                                                               'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DModel.forward': ( 'nets/cait_3d.html#cait3dmodel.forward',
                                                                                                              'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage1': ( 'nets/cait_3d.html#cait3dstage1',
                                                                                                       'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage1.__init__': ( 'nets/cait_3d.html#cait3dstage1.__init__',
                                                                                                                'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage1.forward': ( 'nets/cait_3d.html#cait3dstage1.forward',
                                                                                                               'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage1Config': ( 'nets/cait_3d.html#cait3dstage1config',
                                                                                                             'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage1Layer': ( 'nets/cait_3d.html#cait3dstage1layer',
                                                                                                            'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage1Layer.__init__': ( 'nets/cait_3d.html#cait3dstage1layer.__init__',
                                                                                                                     'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage1Layer.forward': ( 'nets/cait_3d.html#cait3dstage1layer.forward',
                                                                                                                    'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage2': ( 'nets/cait_3d.html#cait3dstage2',
                                                                                                       'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage2.__init__': ( 'nets/cait_3d.html#cait3dstage2.__init__',
                                                                                                                'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage2.forward': ( 'nets/cait_3d.html#cait3dstage2.forward',
                                                                                                               'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage2Config': ( 'nets/cait_3d.html#cait3dstage2config',
                                                                                                             'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage2Layer': ( 'nets/cait_3d.html#cait3dstage2layer',
                                                                                                            'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage2Layer.__init__': ( 'nets/cait_3d.html#cait3dstage2layer.__init__',
                                                                                                                     'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage2Layer.forward': ( 'nets/cait_3d.html#cait3dstage2layer.forward',
                                                                                                                    'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage2OnlyModel': ( 'nets/cait_3d.html#cait3dstage2onlymodel',
                                                                                                                'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage2OnlyModel.__init__': ( 'nets/cait_3d.html#cait3dstage2onlymodel.__init__',
                                                                                                                         'vision_architectures/nets/cait_3d.py'),
                                                   'vision_architectures.nets.cait_3d.CaiT3DStage2OnlyModel.forward': ( 'nets/cait_3d.html#cait3dstage2onlymodel.forward',
                                                                                                                        'vision_architectures/nets/cait_3d.py')},
            'vision_architectures.nets.detr_3d': { 'vision_architectures.nets.detr_3d.DETR3DBBoxMLP': ( 'nets/detr_3d.html#detr3dbboxmlp',
                                                                                                        'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DBBoxMLP.__init__': ( 'nets/detr_3d.html#detr3dbboxmlp.__init__',
                                                                                                                 'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DBBoxMLP.forward': ( 'nets/detr_3d.html#detr3dbboxmlp.forward',
                                                                                                                'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DDecoder': ( 'nets/detr_3d.html#detr3ddecoder',
                                                                                                        'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DDecoder.__init__': ( 'nets/detr_3d.html#detr3ddecoder.__init__',
                                                                                                                 'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DDecoder.forward': ( 'nets/detr_3d.html#detr3ddecoder.forward',
                                                                                                                'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DDecoderLayer': ( 'nets/detr_3d.html#detr3ddecoderlayer',
                                                                                                             'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DDecoderLayer.__init__': ( 'nets/detr_3d.html#detr3ddecoderlayer.__init__',
                                                                                                                      'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DDecoderLayer.forward': ( 'nets/detr_3d.html#detr3ddecoderlayer.forward',
                                                                                                                     'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DModel': ( 'nets/detr_3d.html#detr3dmodel',
                                                                                                      'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DModel.__init__': ( 'nets/detr_3d.html#detr3dmodel.__init__',
                                                                                                               'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DModel.forward': ( 'nets/detr_3d.html#detr3dmodel.forward',
                                                                                                              'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DPositionEmbeddings': ( 'nets/detr_3d.html#detr3dpositionembeddings',
                                                                                                                   'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DPositionEmbeddings.__init__': ( 'nets/detr_3d.html#detr3dpositionembeddings.__init__',
                                                                                                                            'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.DETR3DPositionEmbeddings.forward': ( 'nets/detr_3d.html#detr3dpositionembeddings.forward',
                                                                                                                           'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.embed_spacings_in_position_embeddings': ( 'nets/detr_3d.html#embed_spacings_in_position_embeddings',
                                                                                                                                'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.get_3d_position_embeddings': ( 'nets/detr_3d.html#get_3d_position_embeddings',
                                                                                                                     'vision_architectures/nets/detr_3d.py'),
                                                   'vision_architectures.nets.detr_3d.get_coords_grid': ( 'nets/detr_3d.html#get_coords_grid',
                                                                                                          'vision_architectures/nets/detr_3d.py')},
            'vision_architectures.nets.fpn_2d': { 'vision_architectures.nets.fpn_2d.FPN2D': ( 'nets/fpn_2d.html#fpn2d',
                                                                                              'vision_architectures/nets/fpn_2d.py'),
                                                  'vision_architectures.nets.fpn_2d.FPN2D.__init__': ( 'nets/fpn_2d.html#fpn2d.__init__',
                                                                                                       'vision_architectures/nets/fpn_2d.py'),
                                                  'vision_architectures.nets.fpn_2d.FPN2D.forward': ( 'nets/fpn_2d.html#fpn2d.forward',
                                                                                                      'vision_architectures/nets/fpn_2d.py'),
                                                  'vision_architectures.nets.fpn_2d.FPN2DBlock': ( 'nets/fpn_2d.html#fpn2dblock',
                                                                                                   'vision_architectures/nets/fpn_2d.py'),
                                                  'vision_architectures.nets.fpn_2d.FPN2DBlock.__init__': ( 'nets/fpn_2d.html#fpn2dblock.__init__',
                                                                                                            'vision_architectures/nets/fpn_2d.py'),
                                                  'vision_architectures.nets.fpn_2d.FPN2DBlock.forward': ( 'nets/fpn_2d.html#fpn2dblock.forward',
                                                                                                           'vision_architectures/nets/fpn_2d.py'),
                                                  'vision_architectures.nets.fpn_2d.FPN2DBlock.merge_features': ( 'nets/fpn_2d.html#fpn2dblock.merge_features',
                                                                                                                  'vision_architectures/nets/fpn_2d.py')},
            'vision_architectures.nets.fpn_3d': { 'vision_architectures.nets.fpn_3d.FPN3D': ( 'nets/fpn_3d.html#fpn3d',
                                                                                              'vision_architectures/nets/fpn_3d.py'),
                                                  'vision_architectures.nets.fpn_3d.FPN3D.__init__': ( 'nets/fpn_3d.html#fpn3d.__init__',
                                                                                                       'vision_architectures/nets/fpn_3d.py'),
                                                  'vision_architectures.nets.fpn_3d.FPN3D.forward': ( 'nets/fpn_3d.html#fpn3d.forward',
                                                                                                      'vision_architectures/nets/fpn_3d.py'),
                                                  'vision_architectures.nets.fpn_3d.FPN3DBlock': ( 'nets/fpn_3d.html#fpn3dblock',
                                                                                                   'vision_architectures/nets/fpn_3d.py'),
                                                  'vision_architectures.nets.fpn_3d.FPN3DBlock.__init__': ( 'nets/fpn_3d.html#fpn3dblock.__init__',
                                                                                                            'vision_architectures/nets/fpn_3d.py'),
                                                  'vision_architectures.nets.fpn_3d.FPN3DBlock.forward': ( 'nets/fpn_3d.html#fpn3dblock.forward',
                                                                                                           'vision_architectures/nets/fpn_3d.py'),
                                                  'vision_architectures.nets.fpn_3d.FPN3DBlock.merge_features': ( 'nets/fpn_3d.html#fpn3dblock.merge_features',
                                                                                                                  'vision_architectures/nets/fpn_3d.py')},
            'vision_architectures.nets.maxvit_3d': { 'vision_architectures.nets.maxvit_3d.MaxViT3DBlock': ( 'nets/maxvit_3d.html#maxvit3dblock',
                                                                                                            'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DBlock.__init__': ( 'nets/maxvit_3d.html#maxvit3dblock.__init__',
                                                                                                                     'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DBlock._forward': ( 'nets/maxvit_3d.html#maxvit3dblock._forward',
                                                                                                                     'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DBlock.forward': ( 'nets/maxvit_3d.html#maxvit3dblock.forward',
                                                                                                                    'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DBlockAttention': ( 'nets/maxvit_3d.html#maxvit3dblockattention',
                                                                                                                     'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DBlockConfig': ( 'nets/maxvit_3d.html#maxvit3dblockconfig',
                                                                                                                  'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DEncoder': ( 'nets/maxvit_3d.html#maxvit3dencoder',
                                                                                                              'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DEncoder.__init__': ( 'nets/maxvit_3d.html#maxvit3dencoder.__init__',
                                                                                                                       'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DEncoder._forward': ( 'nets/maxvit_3d.html#maxvit3dencoder._forward',
                                                                                                                       'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DEncoder.forward': ( 'nets/maxvit_3d.html#maxvit3dencoder.forward',
                                                                                                                      'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DEncoderConfig': ( 'nets/maxvit_3d.html#maxvit3dencoderconfig',
                                                                                                                    'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DEncoderConfig.validate': ( 'nets/maxvit_3d.html#maxvit3dencoderconfig.validate',
                                                                                                                             'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DGridAttention': ( 'nets/maxvit_3d.html#maxvit3dgridattention',
                                                                                                                    'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DGridAttention._get_rearrange_patterns': ( 'nets/maxvit_3d.html#maxvit3dgridattention._get_rearrange_patterns',
                                                                                                                                            'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DStem': ( 'nets/maxvit_3d.html#maxvit3dstem',
                                                                                                           'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DStem.__init__': ( 'nets/maxvit_3d.html#maxvit3dstem.__init__',
                                                                                                                    'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DStem._forward': ( 'nets/maxvit_3d.html#maxvit3dstem._forward',
                                                                                                                    'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DStem.forward': ( 'nets/maxvit_3d.html#maxvit3dstem.forward',
                                                                                                                   'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DStem0': ( 'nets/maxvit_3d.html#maxvit3dstem0',
                                                                                                            'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DStem0.__init__': ( 'nets/maxvit_3d.html#maxvit3dstem0.__init__',
                                                                                                                     'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DStem0._forward': ( 'nets/maxvit_3d.html#maxvit3dstem0._forward',
                                                                                                                     'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DStem0.forward': ( 'nets/maxvit_3d.html#maxvit3dstem0.forward',
                                                                                                                    'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DStem0Config': ( 'nets/maxvit_3d.html#maxvit3dstem0config',
                                                                                                                  'vision_architectures/nets/maxvit_3d.py'),
                                                     'vision_architectures.nets.maxvit_3d.MaxViT3DStemConfig': ( 'nets/maxvit_3d.html#maxvit3dstemconfig',
                                                                                                                 'vision_architectures/nets/maxvit_3d.py')},
            'vision_architectures.nets.perceiver_3d': { 'vision_architectures.nets.perceiver_3d.Perceiver3DChannelMapping': ( 'nets/perceiver_3d.html#perceiver3dchannelmapping',
                                                                                                                              'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DChannelMapping.__init__': ( 'nets/perceiver_3d.html#perceiver3dchannelmapping.__init__',
                                                                                                                                       'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DChannelMapping.forward': ( 'nets/perceiver_3d.html#perceiver3dchannelmapping.forward',
                                                                                                                                      'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DChannelMappingConfig': ( 'nets/perceiver_3d.html#perceiver3dchannelmappingconfig',
                                                                                                                                    'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DConfig': ( 'nets/perceiver_3d.html#perceiver3dconfig',
                                                                                                                      'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DConfig.validate': ( 'nets/perceiver_3d.html#perceiver3dconfig.validate',
                                                                                                                               'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DConfig.validate_before': ( 'nets/perceiver_3d.html#perceiver3dconfig.validate_before',
                                                                                                                                      'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DDecoder': ( 'nets/perceiver_3d.html#perceiver3ddecoder',
                                                                                                                       'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DDecoder.__init__': ( 'nets/perceiver_3d.html#perceiver3ddecoder.__init__',
                                                                                                                                'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DDecoder._forward': ( 'nets/perceiver_3d.html#perceiver3ddecoder._forward',
                                                                                                                                'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DDecoder.forward': ( 'nets/perceiver_3d.html#perceiver3ddecoder.forward',
                                                                                                                               'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DDecoderConfig': ( 'nets/perceiver_3d.html#perceiver3ddecoderconfig',
                                                                                                                             'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoder': ( 'nets/perceiver_3d.html#perceiver3dencoder',
                                                                                                                       'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoder.__init__': ( 'nets/perceiver_3d.html#perceiver3dencoder.__init__',
                                                                                                                                'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoder._forward': ( 'nets/perceiver_3d.html#perceiver3dencoder._forward',
                                                                                                                                'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoder.forward': ( 'nets/perceiver_3d.html#perceiver3dencoder.forward',
                                                                                                                               'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderConfig': ( 'nets/perceiver_3d.html#perceiver3dencoderconfig',
                                                                                                                             'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderConfig.dim': ( 'nets/perceiver_3d.html#perceiver3dencoderconfig.dim',
                                                                                                                                 'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderConfig.latent_grid_size': ( 'nets/perceiver_3d.html#perceiver3dencoderconfig.latent_grid_size',
                                                                                                                                              'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderConfig.validate': ( 'nets/perceiver_3d.html#perceiver3dencoderconfig.validate',
                                                                                                                                      'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderConfig.validate_before': ( 'nets/perceiver_3d.html#perceiver3dencoderconfig.validate_before',
                                                                                                                                             'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderEncode': ( 'nets/perceiver_3d.html#perceiver3dencoderencode',
                                                                                                                             'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderEncode.__init__': ( 'nets/perceiver_3d.html#perceiver3dencoderencode.__init__',
                                                                                                                                      'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderEncode._forward': ( 'nets/perceiver_3d.html#perceiver3dencoderencode._forward',
                                                                                                                                      'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderEncode.forward': ( 'nets/perceiver_3d.html#perceiver3dencoderencode.forward',
                                                                                                                                     'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderEncodeConfig': ( 'nets/perceiver_3d.html#perceiver3dencoderencodeconfig',
                                                                                                                                   'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderProcess': ( 'nets/perceiver_3d.html#perceiver3dencoderprocess',
                                                                                                                              'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderProcess.__init__': ( 'nets/perceiver_3d.html#perceiver3dencoderprocess.__init__',
                                                                                                                                       'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderProcess._forward': ( 'nets/perceiver_3d.html#perceiver3dencoderprocess._forward',
                                                                                                                                       'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderProcess.forward': ( 'nets/perceiver_3d.html#perceiver3dencoderprocess.forward',
                                                                                                                                      'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderProcessConfig': ( 'nets/perceiver_3d.html#perceiver3dencoderprocessconfig',
                                                                                                                                    'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.Perceiver3DEncoderProcessConfig.validate': ( 'nets/perceiver_3d.html#perceiver3dencoderprocessconfig.validate',
                                                                                                                                             'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.fold_back_3d': ( 'nets/perceiver_3d.html#fold_back_3d',
                                                                                                                 'vision_architectures/nets/perceiver_3d.py'),
                                                        'vision_architectures.nets.perceiver_3d.unfold_with_roll_3d': ( 'nets/perceiver_3d.html#unfold_with_roll_3d',
                                                                                                                        'vision_architectures/nets/perceiver_3d.py')},
            'vision_architectures.nets.swin_3d': { 'vision_architectures.nets.swin_3d.Swin3DBlock': ( 'nets/swin_3d.html#swin3dblock',
                                                                                                      'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DBlock.__init__': ( 'nets/swin_3d.html#swin3dblock.__init__',
                                                                                                               'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DBlock.forward': ( 'nets/swin_3d.html#swin3dblock.forward',
                                                                                                              'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DConfig': ( 'nets/swin_3d.html#swin3dconfig',
                                                                                                       'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DConfig.populate': ( 'nets/swin_3d.html#swin3dconfig.populate',
                                                                                                                'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DConfig.validate': ( 'nets/swin_3d.html#swin3dconfig.validate',
                                                                                                                'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DEncoder': ( 'nets/swin_3d.html#swin3dencoder',
                                                                                                        'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DEncoder.__init__': ( 'nets/swin_3d.html#swin3dencoder.__init__',
                                                                                                                 'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DEncoder.forward': ( 'nets/swin_3d.html#swin3dencoder.forward',
                                                                                                                'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DLayer': ( 'nets/swin_3d.html#swin3dlayer',
                                                                                                      'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DLayer.__init__': ( 'nets/swin_3d.html#swin3dlayer.__init__',
                                                                                                               'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DLayer.forward': ( 'nets/swin_3d.html#swin3dlayer.forward',
                                                                                                              'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DMIM': ( 'nets/swin_3d.html#swin3dmim',
                                                                                                    'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DMIM.__init__': ( 'nets/swin_3d.html#swin3dmim.__init__',
                                                                                                             'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DMIM.forward': ( 'nets/swin_3d.html#swin3dmim.forward',
                                                                                                            'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DMIMConfig': ( 'nets/swin_3d.html#swin3dmimconfig',
                                                                                                          'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DMIMDecoder': ( 'nets/swin_3d.html#swin3dmimdecoder',
                                                                                                           'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DMIMDecoder.__init__': ( 'nets/swin_3d.html#swin3dmimdecoder.__init__',
                                                                                                                    'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DMIMDecoder.forward': ( 'nets/swin_3d.html#swin3dmimdecoder.forward',
                                                                                                                   'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DModel': ( 'nets/swin_3d.html#swin3dmodel',
                                                                                                      'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DModel.__init__': ( 'nets/swin_3d.html#swin3dmodel.__init__',
                                                                                                               'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DModel.forward': ( 'nets/swin_3d.html#swin3dmodel.forward',
                                                                                                              'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DPatchMerging': ( 'nets/swin_3d.html#swin3dpatchmerging',
                                                                                                             'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DPatchMerging.__init__': ( 'nets/swin_3d.html#swin3dpatchmerging.__init__',
                                                                                                                      'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DPatchMerging.forward': ( 'nets/swin_3d.html#swin3dpatchmerging.forward',
                                                                                                                     'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DPatchMergingConfig': ( 'nets/swin_3d.html#swin3dpatchmergingconfig',
                                                                                                                   'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DPatchMergingConfig.validate_before': ( 'nets/swin_3d.html#swin3dpatchmergingconfig.validate_before',
                                                                                                                                   'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DPatchSplittingConfig': ( 'nets/swin_3d.html#swin3dpatchsplittingconfig',
                                                                                                                     'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DPatchSplittingConfig.validate_before': ( 'nets/swin_3d.html#swin3dpatchsplittingconfig.validate_before',
                                                                                                                                     'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DStage': ( 'nets/swin_3d.html#swin3dstage',
                                                                                                      'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DStage.__init__': ( 'nets/swin_3d.html#swin3dstage.__init__',
                                                                                                               'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DStage.forward': ( 'nets/swin_3d.html#swin3dstage.forward',
                                                                                                              'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DStageConfig': ( 'nets/swin_3d.html#swin3dstageconfig',
                                                                                                            'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DStageConfig.get_in_patch_size': ( 'nets/swin_3d.html#swin3dstageconfig.get_in_patch_size',
                                                                                                                              'vision_architectures/nets/swin_3d.py'),
                                                   'vision_architectures.nets.swin_3d.Swin3DStageConfig.get_out_patch_size': ( 'nets/swin_3d.html#swin3dstageconfig.get_out_patch_size',
                                                                                                                               'vision_architectures/nets/swin_3d.py')},
            'vision_architectures.nets.swinv2_3d': { 'vision_architectures.nets.swinv2_3d.Swin3DMIMConfig': ( 'nets/swinv2_3d.html#swin3dmimconfig',
                                                                                                              'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DBlock': ( 'nets/swinv2_3d.html#swinv23dblock',
                                                                                                            'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DBlock.__init__': ( 'nets/swinv2_3d.html#swinv23dblock.__init__',
                                                                                                                     'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DBlock.forward': ( 'nets/swinv2_3d.html#swinv23dblock.forward',
                                                                                                                    'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DConfig': ( 'nets/swinv2_3d.html#swinv23dconfig',
                                                                                                             'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DConfig.validate': ( 'nets/swinv2_3d.html#swinv23dconfig.validate',
                                                                                                                      'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DDecoder': ( 'nets/swinv2_3d.html#swinv23ddecoder',
                                                                                                              'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DDecoder.__init__': ( 'nets/swinv2_3d.html#swinv23ddecoder.__init__',
                                                                                                                       'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DDecoder._forward': ( 'nets/swinv2_3d.html#swinv23ddecoder._forward',
                                                                                                                       'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DDecoder.forward': ( 'nets/swinv2_3d.html#swinv23ddecoder.forward',
                                                                                                                      'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DDecoderConfig': ( 'nets/swinv2_3d.html#swinv23ddecoderconfig',
                                                                                                                    'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DDecoderConfig.populate': ( 'nets/swinv2_3d.html#swinv23ddecoderconfig.populate',
                                                                                                                             'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DDecoderConfig.validate': ( 'nets/swinv2_3d.html#swinv23ddecoderconfig.validate',
                                                                                                                             'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DEncoder': ( 'nets/swinv2_3d.html#swinv23dencoder',
                                                                                                              'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DEncoder.__init__': ( 'nets/swinv2_3d.html#swinv23dencoder.__init__',
                                                                                                                       'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DEncoder._forward': ( 'nets/swinv2_3d.html#swinv23dencoder._forward',
                                                                                                                       'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DEncoder.forward': ( 'nets/swinv2_3d.html#swinv23dencoder.forward',
                                                                                                                      'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DLayer': ( 'nets/swinv2_3d.html#swinv23dlayer',
                                                                                                            'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DLayer.__init__': ( 'nets/swinv2_3d.html#swinv23dlayer.__init__',
                                                                                                                     'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DLayer._forward': ( 'nets/swinv2_3d.html#swinv23dlayer._forward',
                                                                                                                     'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DLayer._get_rearrange_patterns': ( 'nets/swinv2_3d.html#swinv23dlayer._get_rearrange_patterns',
                                                                                                                                    'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DLayer.forward': ( 'nets/swinv2_3d.html#swinv23dlayer.forward',
                                                                                                                    'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DLayerLogitScale': ( 'nets/swinv2_3d.html#swinv23dlayerlogitscale',
                                                                                                                      'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DLayerLogitScale.__init__': ( 'nets/swinv2_3d.html#swinv23dlayerlogitscale.__init__',
                                                                                                                               'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DLayerLogitScale.forward': ( 'nets/swinv2_3d.html#swinv23dlayerlogitscale.forward',
                                                                                                                              'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DMIM': ( 'nets/swinv2_3d.html#swinv23dmim',
                                                                                                          'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DMIM.__init__': ( 'nets/swinv2_3d.html#swinv23dmim.__init__',
                                                                                                                   'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DMIM._get_grid_size': ( 'nets/swinv2_3d.html#swinv23dmim._get_grid_size',
                                                                                                                         'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DMIM.mask_image': ( 'nets/swinv2_3d.html#swinv23dmim.mask_image',
                                                                                                                     'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DModel': ( 'nets/swinv2_3d.html#swinv23dmodel',
                                                                                                            'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DModel.__init__': ( 'nets/swinv2_3d.html#swinv23dmodel.__init__',
                                                                                                                     'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DModel.forward': ( 'nets/swinv2_3d.html#swinv23dmodel.forward',
                                                                                                                    'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DPatchMerging': ( 'nets/swinv2_3d.html#swinv23dpatchmerging',
                                                                                                                   'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DPatchMerging.__init__': ( 'nets/swinv2_3d.html#swinv23dpatchmerging.__init__',
                                                                                                                            'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DPatchMerging._forward': ( 'nets/swinv2_3d.html#swinv23dpatchmerging._forward',
                                                                                                                            'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DPatchMerging.forward': ( 'nets/swinv2_3d.html#swinv23dpatchmerging.forward',
                                                                                                                           'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DPatchMergingConfig': ( 'nets/swinv2_3d.html#swinv23dpatchmergingconfig',
                                                                                                                         'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DPatchMergingConfig.validate_before': ( 'nets/swinv2_3d.html#swinv23dpatchmergingconfig.validate_before',
                                                                                                                                         'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DPatchSplitting': ( 'nets/swinv2_3d.html#swinv23dpatchsplitting',
                                                                                                                     'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DPatchSplitting.__init__': ( 'nets/swinv2_3d.html#swinv23dpatchsplitting.__init__',
                                                                                                                              'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DPatchSplitting._forward': ( 'nets/swinv2_3d.html#swinv23dpatchsplitting._forward',
                                                                                                                              'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DPatchSplitting.forward': ( 'nets/swinv2_3d.html#swinv23dpatchsplitting.forward',
                                                                                                                             'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DPatchSplittingConfig': ( 'nets/swinv2_3d.html#swinv23dpatchsplittingconfig',
                                                                                                                           'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DPatchSplittingConfig.validate_before': ( 'nets/swinv2_3d.html#swinv23dpatchsplittingconfig.validate_before',
                                                                                                                                           'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DReconstructionDecoder': ( 'nets/swinv2_3d.html#swinv23dreconstructiondecoder',
                                                                                                                            'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DReconstructionDecoder.__init__': ( 'nets/swinv2_3d.html#swinv23dreconstructiondecoder.__init__',
                                                                                                                                     'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DReconstructionDecoder.forward': ( 'nets/swinv2_3d.html#swinv23dreconstructiondecoder.forward',
                                                                                                                                    'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DSimMIM': ( 'nets/swinv2_3d.html#swinv23dsimmim',
                                                                                                             'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DSimMIM.__init__': ( 'nets/swinv2_3d.html#swinv23dsimmim.__init__',
                                                                                                                      'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DSimMIM.forward': ( 'nets/swinv2_3d.html#swinv23dsimmim.forward',
                                                                                                                     'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DSimMIM.loss_fn': ( 'nets/swinv2_3d.html#swinv23dsimmim.loss_fn',
                                                                                                                     'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DStage': ( 'nets/swinv2_3d.html#swinv23dstage',
                                                                                                            'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DStage.__init__': ( 'nets/swinv2_3d.html#swinv23dstage.__init__',
                                                                                                                     'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DStage._forward': ( 'nets/swinv2_3d.html#swinv23dstage._forward',
                                                                                                                     'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DStage.forward': ( 'nets/swinv2_3d.html#swinv23dstage.forward',
                                                                                                                    'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DStageConfig': ( 'nets/swinv2_3d.html#swinv23dstageconfig',
                                                                                                                  'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DStageConfig.get_in_patch_size': ( 'nets/swinv2_3d.html#swinv23dstageconfig.get_in_patch_size',
                                                                                                                                    'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DStageConfig.get_out_patch_size': ( 'nets/swinv2_3d.html#swinv23dstageconfig.get_out_patch_size',
                                                                                                                                     'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DStageConfig.spatial_compression_ratio': ( 'nets/swinv2_3d.html#swinv23dstageconfig.spatial_compression_ratio',
                                                                                                                                            'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DVAEMIM': ( 'nets/swinv2_3d.html#swinv23dvaemim',
                                                                                                             'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DVAEMIM.__init__': ( 'nets/swinv2_3d.html#swinv23dvaemim.__init__',
                                                                                                                      'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DVAEMIM.forward': ( 'nets/swinv2_3d.html#swinv23dvaemim.forward',
                                                                                                                     'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DVAEMIM.get_beta': ( 'nets/swinv2_3d.html#swinv23dvaemim.get_beta',
                                                                                                                      'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DVAEMIM.kl_divergence_loss_fn': ( 'nets/swinv2_3d.html#swinv23dvaemim.kl_divergence_loss_fn',
                                                                                                                                   'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DVAEMIM.reconstruction_loss_fn': ( 'nets/swinv2_3d.html#swinv23dvaemim.reconstruction_loss_fn',
                                                                                                                                    'vision_architectures/nets/swinv2_3d.py'),
                                                     'vision_architectures.nets.swinv2_3d.SwinV23DVAEMIM.reparameterize': ( 'nets/swinv2_3d.html#swinv23dvaemim.reparameterize',
                                                                                                                            'vision_architectures/nets/swinv2_3d.py')},
            'vision_architectures.nets.symswin_3d': { 'vision_architectures.nets.symswin_3d.SymSwin3DBlock': ( 'nets/symswin3d.html#symswin3dblock',
                                                                                                               'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DBlock.__init__': ( 'nets/symswin3d.html#symswin3dblock.__init__',
                                                                                                                        'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DBlock.forward': ( 'nets/symswin3d.html#symswin3dblock.forward',
                                                                                                                       'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DEmbeddings': ( 'nets/symswin3d.html#symswin3dembeddings',
                                                                                                                    'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DEmbeddings.__init__': ( 'nets/symswin3d.html#symswin3dembeddings.__init__',
                                                                                                                             'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DEmbeddings.forward': ( 'nets/symswin3d.html#symswin3dembeddings.forward',
                                                                                                                            'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DEncoder': ( 'nets/symswin3d.html#symswin3dencoder',
                                                                                                                 'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DEncoder.__init__': ( 'nets/symswin3d.html#symswin3dencoder.__init__',
                                                                                                                          'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DEncoder.forward': ( 'nets/symswin3d.html#symswin3dencoder.forward',
                                                                                                                         'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DLayer': ( 'nets/symswin3d.html#symswin3dlayer',
                                                                                                               'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DLayer.__init__': ( 'nets/symswin3d.html#symswin3dlayer.__init__',
                                                                                                                        'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DLayer.forward': ( 'nets/symswin3d.html#symswin3dlayer.forward',
                                                                                                                       'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DLayerMLP': ( 'nets/symswin3d.html#symswin3dlayermlp',
                                                                                                                  'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DLayerMLP.__init__': ( 'nets/symswin3d.html#symswin3dlayermlp.__init__',
                                                                                                                           'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DLayerMLP.forward': ( 'nets/symswin3d.html#symswin3dlayermlp.forward',
                                                                                                                          'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DMHSA': ( 'nets/symswin3d.html#symswin3dmhsa',
                                                                                                              'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DMHSA.__init__': ( 'nets/symswin3d.html#symswin3dmhsa.__init__',
                                                                                                                       'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DMHSA.calculate_relative_position_bias': ( 'nets/symswin3d.html#symswin3dmhsa.calculate_relative_position_bias',
                                                                                                                                               'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DMHSA.forward': ( 'nets/symswin3d.html#symswin3dmhsa.forward',
                                                                                                                      'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DMIM': ( 'nets/symswin3d.html#symswin3dmim',
                                                                                                             'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DMIM.__init__': ( 'nets/symswin3d.html#symswin3dmim.__init__',
                                                                                                                      'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DMIM.mask_image': ( 'nets/symswin3d.html#symswin3dmim.mask_image',
                                                                                                                        'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DModel': ( 'nets/symswin3d.html#symswin3dmodel',
                                                                                                               'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DModel.__init__': ( 'nets/symswin3d.html#symswin3dmodel.__init__',
                                                                                                                        'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DModel.forward': ( 'nets/symswin3d.html#symswin3dmodel.forward',
                                                                                                                       'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DPatchEmbeddings': ( 'nets/symswin3d.html#symswin3dpatchembeddings',
                                                                                                                         'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DPatchEmbeddings.__init__': ( 'nets/symswin3d.html#symswin3dpatchembeddings.__init__',
                                                                                                                                  'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DPatchEmbeddings.forward': ( 'nets/symswin3d.html#symswin3dpatchembeddings.forward',
                                                                                                                                 'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DPatchMerging': ( 'nets/symswin3d.html#symswin3dpatchmerging',
                                                                                                                      'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DPatchMerging.__init__': ( 'nets/symswin3d.html#symswin3dpatchmerging.__init__',
                                                                                                                               'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DPatchMerging.forward': ( 'nets/symswin3d.html#symswin3dpatchmerging.forward',
                                                                                                                              'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DReconstructionDecoder': ( 'nets/symswin3d.html#symswin3dreconstructiondecoder',
                                                                                                                               'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DReconstructionDecoder.__init__': ( 'nets/symswin3d.html#symswin3dreconstructiondecoder.__init__',
                                                                                                                                        'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DReconstructionDecoder.forward': ( 'nets/symswin3d.html#symswin3dreconstructiondecoder.forward',
                                                                                                                                       'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DSimMIM': ( 'nets/symswin3d.html#symswin3dsimmim',
                                                                                                                'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DSimMIM.__init__': ( 'nets/symswin3d.html#symswin3dsimmim.__init__',
                                                                                                                         'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DSimMIM.forward': ( 'nets/symswin3d.html#symswin3dsimmim.forward',
                                                                                                                        'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DSimMIM.loss_fn': ( 'nets/symswin3d.html#symswin3dsimmim.loss_fn',
                                                                                                                        'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DStage': ( 'nets/symswin3d.html#symswin3dstage',
                                                                                                               'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DStage.__init__': ( 'nets/symswin3d.html#symswin3dstage.__init__',
                                                                                                                        'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DStage.forward': ( 'nets/symswin3d.html#symswin3dstage.forward',
                                                                                                                       'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DVAEMIM': ( 'nets/symswin3d.html#symswin3dvaemim',
                                                                                                                'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DVAEMIM.__init__': ( 'nets/symswin3d.html#symswin3dvaemim.__init__',
                                                                                                                         'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DVAEMIM.forward': ( 'nets/symswin3d.html#symswin3dvaemim.forward',
                                                                                                                        'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DVAEMIM.get_beta': ( 'nets/symswin3d.html#symswin3dvaemim.get_beta',
                                                                                                                         'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DVAEMIM.kl_divergence_loss_fn': ( 'nets/symswin3d.html#symswin3dvaemim.kl_divergence_loss_fn',
                                                                                                                                      'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DVAEMIM.reconstruction_loss_fn': ( 'nets/symswin3d.html#symswin3dvaemim.reconstruction_loss_fn',
                                                                                                                                       'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.SymSwin3DVAEMIM.reparameterize': ( 'nets/symswin3d.html#symswin3dvaemim.reparameterize',
                                                                                                                               'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.embed_spacings_in_position_embeddings': ( 'nets/symswin3d.html#embed_spacings_in_position_embeddings',
                                                                                                                                      'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.get_3d_position_embeddings': ( 'nets/symswin3d.html#get_3d_position_embeddings',
                                                                                                                           'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.get_coords_grid': ( 'nets/symswin3d.html#get_coords_grid',
                                                                                                                'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.populate_and_validate_config': ( 'nets/symswin3d.html#populate_and_validate_config',
                                                                                                                             'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.symmetry_attention_rearrange_backward': ( 'nets/symswin3d.html#symmetry_attention_rearrange_backward',
                                                                                                                                      'vision_architectures/nets/symswin_3d.py'),
                                                      'vision_architectures.nets.symswin_3d.symmetry_attention_rearrange_forward': ( 'nets/symswin3d.html#symmetry_attention_rearrange_forward',
                                                                                                                                     'vision_architectures/nets/symswin_3d.py')},
            'vision_architectures.nets.unetr_3d_decoder': { 'vision_architectures.nets.unetr_3d_decoder.UNetR3DBlock': ( 'nets/unetr_3d_decoder.html#unetr3dblock',
                                                                                                                         'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DBlock.__init__': ( 'nets/unetr_3d_decoder.html#unetr3dblock.__init__',
                                                                                                                                  'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DBlock.forward': ( 'nets/unetr_3d_decoder.html#unetr3dblock.forward',
                                                                                                                                 'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DConfig': ( 'nets/unetr_3d_decoder.html#unetr3dconfig',
                                                                                                                          'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DConfig.validate': ( 'nets/unetr_3d_decoder.html#unetr3dconfig.validate',
                                                                                                                                   'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DConvBlock': ( 'nets/unetr_3d_decoder.html#unetr3dconvblock',
                                                                                                                             'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DConvBlock.__init__': ( 'nets/unetr_3d_decoder.html#unetr3dconvblock.__init__',
                                                                                                                                      'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DConvBlock.forward': ( 'nets/unetr_3d_decoder.html#unetr3dconvblock.forward',
                                                                                                                                     'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DDeConvBlock': ( 'nets/unetr_3d_decoder.html#unetr3ddeconvblock',
                                                                                                                               'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DDeConvBlock.__init__': ( 'nets/unetr_3d_decoder.html#unetr3ddeconvblock.__init__',
                                                                                                                                        'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DDeConvBlock.forward': ( 'nets/unetr_3d_decoder.html#unetr3ddeconvblock.forward',
                                                                                                                                       'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DDecoder': ( 'nets/unetr_3d_decoder.html#unetr3ddecoder',
                                                                                                                           'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DDecoder.__init__': ( 'nets/unetr_3d_decoder.html#unetr3ddecoder.__init__',
                                                                                                                                    'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DDecoder._reduce': ( 'nets/unetr_3d_decoder.html#unetr3ddecoder._reduce',
                                                                                                                                   'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DDecoder.cross_entropy_loss_fn': ( 'nets/unetr_3d_decoder.html#unetr3ddecoder.cross_entropy_loss_fn',
                                                                                                                                                 'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DDecoder.forward': ( 'nets/unetr_3d_decoder.html#unetr3ddecoder.forward',
                                                                                                                                   'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DDecoder.loss_fn': ( 'nets/unetr_3d_decoder.html#unetr3ddecoder.loss_fn',
                                                                                                                                   'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DDecoder.soft_dice_loss_fn': ( 'nets/unetr_3d_decoder.html#unetr3ddecoder.soft_dice_loss_fn',
                                                                                                                                             'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DDecoderConfig': ( 'nets/unetr_3d_decoder.html#unetr3ddecoderconfig',
                                                                                                                                 'vision_architectures/nets/unetr_3d_decoder.py'),
                                                            'vision_architectures.nets.unetr_3d_decoder.UNetR3DStageConfig': ( 'nets/unetr_3d_decoder.html#unetr3dstageconfig',
                                                                                                                               'vision_architectures/nets/unetr_3d_decoder.py')},
            'vision_architectures.nets.upernet_2d': { 'vision_architectures.nets.upernet_2d.UPerNet2D': ( 'nets/upernet_2d.html#upernet2d',
                                                                                                          'vision_architectures/nets/upernet_2d.py'),
                                                      'vision_architectures.nets.upernet_2d.UPerNet2D.__init__': ( 'nets/upernet_2d.html#upernet2d.__init__',
                                                                                                                   'vision_architectures/nets/upernet_2d.py'),
                                                      'vision_architectures.nets.upernet_2d.UPerNet2D.forward': ( 'nets/upernet_2d.html#upernet2d.forward',
                                                                                                                  'vision_architectures/nets/upernet_2d.py'),
                                                      'vision_architectures.nets.upernet_2d.UPerNet2DFusion': ( 'nets/upernet_2d.html#upernet2dfusion',
                                                                                                                'vision_architectures/nets/upernet_2d.py'),
                                                      'vision_architectures.nets.upernet_2d.UPerNet2DFusion.__init__': ( 'nets/upernet_2d.html#upernet2dfusion.__init__',
                                                                                                                         'vision_architectures/nets/upernet_2d.py'),
                                                      'vision_architectures.nets.upernet_2d.UPerNet2DFusion.concat_features': ( 'nets/upernet_2d.html#upernet2dfusion.concat_features',
                                                                                                                                'vision_architectures/nets/upernet_2d.py'),
                                                      'vision_architectures.nets.upernet_2d.UPerNet2DFusion.forward': ( 'nets/upernet_2d.html#upernet2dfusion.forward',
                                                                                                                        'vision_architectures/nets/upernet_2d.py'),
                                                      'vision_architectures.nets.upernet_2d.UPerNet2DFusion.fuse_features': ( 'nets/upernet_2d.html#upernet2dfusion.fuse_features',
                                                                                                                              'vision_architectures/nets/upernet_2d.py')},
            'vision_architectures.nets.upernet_3d': { 'vision_architectures.nets.upernet_3d.UPerNet3D': ( 'nets/upernet_3d.html#upernet3d',
                                                                                                          'vision_architectures/nets/upernet_3d.py'),
                                                      'vision_architectures.nets.upernet_3d.UPerNet3D.__init__': ( 'nets/upernet_3d.html#upernet3d.__init__',
                                                                                                                   'vision_architectures/nets/upernet_3d.py'),
                                                      'vision_architectures.nets.upernet_3d.UPerNet3D.forward': ( 'nets/upernet_3d.html#upernet3d.forward',
                                                                                                                  'vision_architectures/nets/upernet_3d.py'),
                                                      'vision_architectures.nets.upernet_3d.UPerNet3DFusion': ( 'nets/upernet_3d.html#upernet3dfusion',
                                                                                                                'vision_architectures/nets/upernet_3d.py'),
                                                      'vision_architectures.nets.upernet_3d.UPerNet3DFusion.__init__': ( 'nets/upernet_3d.html#upernet3dfusion.__init__',
                                                                                                                         'vision_architectures/nets/upernet_3d.py'),
                                                      'vision_architectures.nets.upernet_3d.UPerNet3DFusion.concat_features': ( 'nets/upernet_3d.html#upernet3dfusion.concat_features',
                                                                                                                                'vision_architectures/nets/upernet_3d.py'),
                                                      'vision_architectures.nets.upernet_3d.UPerNet3DFusion.forward': ( 'nets/upernet_3d.html#upernet3dfusion.forward',
                                                                                                                        'vision_architectures/nets/upernet_3d.py'),
                                                      'vision_architectures.nets.upernet_3d.UPerNet3DFusion.fuse_features': ( 'nets/upernet_3d.html#upernet3dfusion.fuse_features',
                                                                                                                              'vision_architectures/nets/upernet_3d.py')},
            'vision_architectures.nets.vit_3d': { 'vision_architectures.nets.vit_3d.ViT3DConfig': ( 'nets/vit_3d.html#vit3dconfig',
                                                                                                    'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DDecoder': ( 'nets/vit_3d.html#vit3ddecoder',
                                                                                                     'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DDecoder.__init__': ( 'nets/vit_3d.html#vit3ddecoder.__init__',
                                                                                                              'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DDecoder.forward': ( 'nets/vit_3d.html#vit3ddecoder.forward',
                                                                                                             'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DDecoderConfig': ( 'nets/vit_3d.html#vit3ddecoderconfig',
                                                                                                           'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DEncoder': ( 'nets/vit_3d.html#vit3dencoder',
                                                                                                     'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DEncoder.__init__': ( 'nets/vit_3d.html#vit3dencoder.__init__',
                                                                                                              'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DEncoder.forward': ( 'nets/vit_3d.html#vit3dencoder.forward',
                                                                                                             'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DEncoderConfig': ( 'nets/vit_3d.html#vit3dencoderconfig',
                                                                                                           'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DMIM': ( 'nets/vit_3d.html#vit3dmim',
                                                                                                 'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DMIM.__init__': ( 'nets/vit_3d.html#vit3dmim.__init__',
                                                                                                          'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DMIM.mask_image': ( 'nets/vit_3d.html#vit3dmim.mask_image',
                                                                                                            'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DMIMDecoder': ( 'nets/vit_3d.html#vit3dmimdecoder',
                                                                                                        'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DMIMDecoder.__init__': ( 'nets/vit_3d.html#vit3dmimdecoder.__init__',
                                                                                                                 'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DMIMDecoder.forward': ( 'nets/vit_3d.html#vit3dmimdecoder.forward',
                                                                                                                'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DModel': ( 'nets/vit_3d.html#vit3dmodel',
                                                                                                   'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DModel.__init__': ( 'nets/vit_3d.html#vit3dmodel.__init__',
                                                                                                            'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DModel.forward': ( 'nets/vit_3d.html#vit3dmodel.forward',
                                                                                                           'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DSimMIM': ( 'nets/vit_3d.html#vit3dsimmim',
                                                                                                    'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DSimMIM.__init__': ( 'nets/vit_3d.html#vit3dsimmim.__init__',
                                                                                                             'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DSimMIM.forward': ( 'nets/vit_3d.html#vit3dsimmim.forward',
                                                                                                            'vision_architectures/nets/vit_3d.py'),
                                                  'vision_architectures.nets.vit_3d.ViT3DSimMIM.loss_fn': ( 'nets/vit_3d.html#vit3dsimmim.loss_fn',
                                                                                                            'vision_architectures/nets/vit_3d.py')},
            'vision_architectures.schedulers.cyclic': { 'vision_architectures.schedulers.cyclic.CyclicAnnealingLR': ( 'schedulers/cyclic.html#cyclicannealinglr',
                                                                                                                      'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.CyclicAnnealingLR.__init__': ( 'schedulers/cyclic.html#cyclicannealinglr.__init__',
                                                                                                                               'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.CyclicAnnealingLR.get_lr': ( 'schedulers/cyclic.html#cyclicannealinglr.get_lr',
                                                                                                                             'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.CyclicAnnealingLR.step': ( 'schedulers/cyclic.html#cyclicannealinglr.step',
                                                                                                                           'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.CyclicAnnealingScheduler': ( 'schedulers/cyclic.html#cyclicannealingscheduler',
                                                                                                                             'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.CyclicAnnealingScheduler.__init__': ( 'schedulers/cyclic.html#cyclicannealingscheduler.__init__',
                                                                                                                                      'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.CyclicAnnealingScheduler.get': ( 'schedulers/cyclic.html#cyclicannealingscheduler.get',
                                                                                                                                 'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.CyclicAnnealingScheduler.is_ready': ( 'schedulers/cyclic.html#cyclicannealingscheduler.is_ready',
                                                                                                                                      'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.CyclicAnnealingScheduler.set_next_phase': ( 'schedulers/cyclic.html#cyclicannealingscheduler.set_next_phase',
                                                                                                                                            'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.CyclicAnnealingScheduler.set_num_annealing_steps': ( 'schedulers/cyclic.html#cyclicannealingscheduler.set_num_annealing_steps',
                                                                                                                                                     'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.CyclicAnnealingScheduler.step': ( 'schedulers/cyclic.html#cyclicannealingscheduler.step',
                                                                                                                                  'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.Phase': ( 'schedulers/cyclic.html#phase',
                                                                                                          'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.SineLR': ( 'schedulers/cyclic.html#sinelr',
                                                                                                           'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.SineLR.__init__': ( 'schedulers/cyclic.html#sinelr.__init__',
                                                                                                                    'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.SineLR.get_lr': ( 'schedulers/cyclic.html#sinelr.get_lr',
                                                                                                                  'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.SineLR.step': ( 'schedulers/cyclic.html#sinelr.step',
                                                                                                                'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.SineScheduler': ( 'schedulers/cyclic.html#sinescheduler',
                                                                                                                  'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.SineScheduler.__init__': ( 'schedulers/cyclic.html#sinescheduler.__init__',
                                                                                                                           'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.SineScheduler.get': ( 'schedulers/cyclic.html#sinescheduler.get',
                                                                                                                      'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.SineScheduler.is_ready': ( 'schedulers/cyclic.html#sinescheduler.is_ready',
                                                                                                                           'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.SineScheduler.set_wavelength': ( 'schedulers/cyclic.html#sinescheduler.set_wavelength',
                                                                                                                                 'vision_architectures/schedulers/cyclic.py'),
                                                        'vision_architectures.schedulers.cyclic.SineScheduler.step': ( 'schedulers/cyclic.html#sinescheduler.step',
                                                                                                                       'vision_architectures/schedulers/cyclic.py')},
            'vision_architectures.schedulers.lrs': { 'vision_architectures.schedulers.lrs.ConstantLRWithWarmup': ( 'schedulers/lrs.html#constantlrwithwarmup',
                                                                                                                   'vision_architectures/schedulers/lrs.py'),
                                                     'vision_architectures.schedulers.lrs.ConstantLRWithWarmup.__init__': ( 'schedulers/lrs.html#constantlrwithwarmup.__init__',
                                                                                                                            'vision_architectures/schedulers/lrs.py')},
            'vision_architectures.schedulers.noise': { 'vision_architectures.schedulers.noise.CosineNoiseScheduler': ( 'schedulers/noise.html#cosinenoisescheduler',
                                                                                                                       'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.CosineNoiseScheduler.__init__': ( 'schedulers/noise.html#cosinenoisescheduler.__init__',
                                                                                                                                'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.ExponentialNoiseScheduler': ( 'schedulers/noise.html#exponentialnoisescheduler',
                                                                                                                            'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.ExponentialNoiseScheduler.__init__': ( 'schedulers/noise.html#exponentialnoisescheduler.__init__',
                                                                                                                                     'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.FibonacciNoiseScheduler': ( 'schedulers/noise.html#fibonaccinoisescheduler',
                                                                                                                          'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.FibonacciNoiseScheduler.__init__': ( 'schedulers/noise.html#fibonaccinoisescheduler.__init__',
                                                                                                                                   'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.LinearNoiseScheduler': ( 'schedulers/noise.html#linearnoisescheduler',
                                                                                                                       'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.LinearNoiseScheduler.__init__': ( 'schedulers/noise.html#linearnoisescheduler.__init__',
                                                                                                                                'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.NoiseScheduler': ( 'schedulers/noise.html#noisescheduler',
                                                                                                                 'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.NoiseScheduler.__init__': ( 'schedulers/noise.html#noisescheduler.__init__',
                                                                                                                          'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.NoiseScheduler.add_noise': ( 'schedulers/noise.html#noisescheduler.add_noise',
                                                                                                                           'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.NoiseScheduler.remove_noise': ( 'schedulers/noise.html#noisescheduler.remove_noise',
                                                                                                                              'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.SigmoidNoiseScheduler': ( 'schedulers/noise.html#sigmoidnoisescheduler',
                                                                                                                        'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.SigmoidNoiseScheduler.__init__': ( 'schedulers/noise.html#sigmoidnoisescheduler.__init__',
                                                                                                                                 'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.SquareRootNoiseScheduler': ( 'schedulers/noise.html#squarerootnoisescheduler',
                                                                                                                           'vision_architectures/schedulers/noise.py'),
                                                       'vision_architectures.schedulers.noise.SquareRootNoiseScheduler.__init__': ( 'schedulers/noise.html#squarerootnoisescheduler.__init__',
                                                                                                                                    'vision_architectures/schedulers/noise.py')},
            'vision_architectures.schedulers.sigmoid': { 'vision_architectures.schedulers.sigmoid.SigmoidLR': ( 'schedulers/sigmoid.html#sigmoidlr',
                                                                                                                'vision_architectures/schedulers/sigmoid.py'),
                                                         'vision_architectures.schedulers.sigmoid.SigmoidLR.__init__': ( 'schedulers/sigmoid.html#sigmoidlr.__init__',
                                                                                                                         'vision_architectures/schedulers/sigmoid.py'),
                                                         'vision_architectures.schedulers.sigmoid.SigmoidLR.get_lr': ( 'schedulers/sigmoid.html#sigmoidlr.get_lr',
                                                                                                                       'vision_architectures/schedulers/sigmoid.py'),
                                                         'vision_architectures.schedulers.sigmoid.SigmoidLR.step': ( 'schedulers/sigmoid.html#sigmoidlr.step',
                                                                                                                     'vision_architectures/schedulers/sigmoid.py'),
                                                         'vision_architectures.schedulers.sigmoid.SigmoidScheduler': ( 'schedulers/sigmoid.html#sigmoidscheduler',
                                                                                                                       'vision_architectures/schedulers/sigmoid.py'),
                                                         'vision_architectures.schedulers.sigmoid.SigmoidScheduler.__init__': ( 'schedulers/sigmoid.html#sigmoidscheduler.__init__',
                                                                                                                                'vision_architectures/schedulers/sigmoid.py'),
                                                         'vision_architectures.schedulers.sigmoid.SigmoidScheduler._scale': ( 'schedulers/sigmoid.html#sigmoidscheduler._scale',
                                                                                                                              'vision_architectures/schedulers/sigmoid.py'),
                                                         'vision_architectures.schedulers.sigmoid.SigmoidScheduler._sigmoid': ( 'schedulers/sigmoid.html#sigmoidscheduler._sigmoid',
                                                                                                                                'vision_architectures/schedulers/sigmoid.py'),
                                                         'vision_architectures.schedulers.sigmoid.SigmoidScheduler.get': ( 'schedulers/sigmoid.html#sigmoidscheduler.get',
                                                                                                                           'vision_architectures/schedulers/sigmoid.py'),
                                                         'vision_architectures.schedulers.sigmoid.SigmoidScheduler.is_completed': ( 'schedulers/sigmoid.html#sigmoidscheduler.is_completed',
                                                                                                                                    'vision_architectures/schedulers/sigmoid.py'),
                                                         'vision_architectures.schedulers.sigmoid.SigmoidScheduler.is_ready': ( 'schedulers/sigmoid.html#sigmoidscheduler.is_ready',
                                                                                                                                'vision_architectures/schedulers/sigmoid.py'),
                                                         'vision_architectures.schedulers.sigmoid.SigmoidScheduler.set_num_steps': ( 'schedulers/sigmoid.html#sigmoidscheduler.set_num_steps',
                                                                                                                                     'vision_architectures/schedulers/sigmoid.py'),
                                                         'vision_architectures.schedulers.sigmoid.SigmoidScheduler.step': ( 'schedulers/sigmoid.html#sigmoidscheduler.step',
                                                                                                                            'vision_architectures/schedulers/sigmoid.py')},
            'vision_architectures.transforms.clipping': { 'vision_architectures.transforms.clipping.Clip': ( 'transforms/clipping.html#clip',
                                                                                                             'vision_architectures/transforms/clipping.py'),
                                                          'vision_architectures.transforms.clipping.Clip.__call__': ( 'transforms/clipping.html#clip.__call__',
                                                                                                                      'vision_architectures/transforms/clipping.py'),
                                                          'vision_architectures.transforms.clipping.Clip.__init__': ( 'transforms/clipping.html#clip.__init__',
                                                                                                                      'vision_architectures/transforms/clipping.py'),
                                                          'vision_architectures.transforms.clipping.Clip.__repr__': ( 'transforms/clipping.html#clip.__repr__',
                                                                                                                      'vision_architectures/transforms/clipping.py'),
                                                          'vision_architectures.transforms.clipping.Clipd': ( 'transforms/clipping.html#clipd',
                                                                                                              'vision_architectures/transforms/clipping.py'),
                                                          'vision_architectures.transforms.clipping.Clipd.__call__': ( 'transforms/clipping.html#clipd.__call__',
                                                                                                                       'vision_architectures/transforms/clipping.py'),
                                                          'vision_architectures.transforms.clipping.Clipd.__init__': ( 'transforms/clipping.html#clipd.__init__',
                                                                                                                       'vision_architectures/transforms/clipping.py'),
                                                          'vision_architectures.transforms.clipping.Clipd.__repr__': ( 'transforms/clipping.html#clipd.__repr__',
                                                                                                                       'vision_architectures/transforms/clipping.py')},
            'vision_architectures.transforms.croppad': { 'vision_architectures.transforms.croppad.CropForegroundWithCropTrackingd': ( 'transforms/croppad.html#cropforegroundwithcroptrackingd',
                                                                                                                                      'vision_architectures/transforms/croppad.py'),
                                                         'vision_architectures.transforms.croppad.CropForegroundWithCropTrackingd.__call__': ( 'transforms/croppad.html#cropforegroundwithcroptrackingd.__call__',
                                                                                                                                               'vision_architectures/transforms/croppad.py'),
                                                         'vision_architectures.transforms.croppad.CropForegroundWithCropTrackingd.__init__': ( 'transforms/croppad.html#cropforegroundwithcroptrackingd.__init__',
                                                                                                                                               'vision_architectures/transforms/croppad.py'),
                                                         'vision_architectures.transforms.croppad.RandSpatialCropSamplesWithCropTracking': ( 'transforms/croppad.html#randspatialcropsampleswithcroptracking',
                                                                                                                                             'vision_architectures/transforms/croppad.py'),
                                                         'vision_architectures.transforms.croppad.RandSpatialCropSamplesWithCropTracking.__call__': ( 'transforms/croppad.html#randspatialcropsampleswithcroptracking.__call__',
                                                                                                                                                      'vision_architectures/transforms/croppad.py'),
                                                         'vision_architectures.transforms.croppad.RandSpatialCropSamplesWithCropTracking.__init__': ( 'transforms/croppad.html#randspatialcropsampleswithcroptracking.__init__',
                                                                                                                                                      'vision_architectures/transforms/croppad.py'),
                                                         'vision_architectures.transforms.croppad.RandSpatialCropSamplesWithCropTrackingd': ( 'transforms/croppad.html#randspatialcropsampleswithcroptrackingd',
                                                                                                                                              'vision_architectures/transforms/croppad.py'),
                                                         'vision_architectures.transforms.croppad.RandSpatialCropSamplesWithCropTrackingd.__call__': ( 'transforms/croppad.html#randspatialcropsampleswithcroptrackingd.__call__',
                                                                                                                                                       'vision_architectures/transforms/croppad.py'),
                                                         'vision_architectures.transforms.croppad.RandSpatialCropSamplesWithCropTrackingd.__init__': ( 'transforms/croppad.html#randspatialcropsampleswithcroptrackingd.__init__',
                                                                                                                                                       'vision_architectures/transforms/croppad.py'),
                                                         'vision_architectures.transforms.croppad.get_updated_crop_start': ( 'transforms/croppad.html#get_updated_crop_start',
                                                                                                                             'vision_architectures/transforms/croppad.py')},
            'vision_architectures.transforms.resize': { 'vision_architectures.transforms.resize.ResizeWithSpacing': ( 'transforms/resize.html#resizewithspacing',
                                                                                                                      'vision_architectures/transforms/resize.py'),
                                                        'vision_architectures.transforms.resize.ResizeWithSpacing.__call__': ( 'transforms/resize.html#resizewithspacing.__call__',
                                                                                                                               'vision_architectures/transforms/resize.py'),
                                                        'vision_architectures.transforms.resize.ResizeWithSpacing.inverse_transform': ( 'transforms/resize.html#resizewithspacing.inverse_transform',
                                                                                                                                        'vision_architectures/transforms/resize.py')},
            'vision_architectures.transforms.spatial': { 'vision_architectures.transforms.spatial.RandFlipWithCropTrackingd': ( 'transforms/spatial.html#randflipwithcroptrackingd',
                                                                                                                                'vision_architectures/transforms/spatial.py'),
                                                         'vision_architectures.transforms.spatial.RandFlipWithCropTrackingd.__call__': ( 'transforms/spatial.html#randflipwithcroptrackingd.__call__',
                                                                                                                                         'vision_architectures/transforms/spatial.py'),
                                                         'vision_architectures.transforms.spatial.RandFlipWithCropTrackingd.__init__': ( 'transforms/spatial.html#randflipwithcroptrackingd.__init__',
                                                                                                                                         'vision_architectures/transforms/spatial.py'),
                                                         'vision_architectures.transforms.spatial.ResizedWithCropTrackingd': ( 'transforms/spatial.html#resizedwithcroptrackingd',
                                                                                                                               'vision_architectures/transforms/spatial.py'),
                                                         'vision_architectures.transforms.spatial.ResizedWithCropTrackingd.__call__': ( 'transforms/spatial.html#resizedwithcroptrackingd.__call__',
                                                                                                                                        'vision_architectures/transforms/spatial.py'),
                                                         'vision_architectures.transforms.spatial.ResizedWithCropTrackingd.__init__': ( 'transforms/spatial.html#resizedwithcroptrackingd.__init__',
                                                                                                                                        'vision_architectures/transforms/spatial.py')},
            'vision_architectures.utils.activation_checkpointing': { 'vision_architectures.utils.activation_checkpointing.ActivationCheckpointing': ( 'utils/activation_checkpointing.html#activationcheckpointing',
                                                                                                                                                      'vision_architectures/utils/activation_checkpointing.py'),
                                                                     'vision_architectures.utils.activation_checkpointing.ActivationCheckpointing.__call__': ( 'utils/activation_checkpointing.html#activationcheckpointing.__call__',
                                                                                                                                                               'vision_architectures/utils/activation_checkpointing.py'),
                                                                     'vision_architectures.utils.activation_checkpointing.ActivationCheckpointing.__init__': ( 'utils/activation_checkpointing.html#activationcheckpointing.__init__',
                                                                                                                                                               'vision_architectures/utils/activation_checkpointing.py'),
                                                                     'vision_architectures.utils.activation_checkpointing.ActivationCheckpointing.extra_repr': ( 'utils/activation_checkpointing.html#activationcheckpointing.extra_repr',
                                                                                                                                                                 'vision_architectures/utils/activation_checkpointing.py')},
            'vision_architectures.utils.activations': { 'vision_architectures.utils.activations.get_act_layer': ( 'utils/activations.html#get_act_layer',
                                                                                                                  'vision_architectures/utils/activations.py')},
            'vision_architectures.utils.clamping': { 'vision_architectures.utils.clamping.ceil_softplus_clamp': ( 'utils/clampling.html#ceil_softplus_clamp',
                                                                                                                  'vision_architectures/utils/clamping.py'),
                                                     'vision_architectures.utils.clamping.floor_softplus_clamp': ( 'utils/clampling.html#floor_softplus_clamp',
                                                                                                                   'vision_architectures/utils/clamping.py'),
                                                     'vision_architectures.utils.clamping.symmetric_tanh_clamp': ( 'utils/clampling.html#symmetric_tanh_clamp',
                                                                                                                   'vision_architectures/utils/clamping.py')},
            'vision_architectures.utils.custom_base_model': { 'vision_architectures.utils.custom_base_model.CustomBaseModel': ( 'utils/custom_base_model.html#custombasemodel',
                                                                                                                                'vision_architectures/utils/custom_base_model.py'),
                                                              'vision_architectures.utils.custom_base_model.CustomBaseModel.__contains__': ( 'utils/custom_base_model.html#custombasemodel.__contains__',
                                                                                                                                             'vision_architectures/utils/custom_base_model.py'),
                                                              'vision_architectures.utils.custom_base_model.CustomBaseModel.__or__': ( 'utils/custom_base_model.html#custombasemodel.__or__',
                                                                                                                                       'vision_architectures/utils/custom_base_model.py'),
                                                              'vision_architectures.utils.custom_base_model.CustomBaseModel.get': ( 'utils/custom_base_model.html#custombasemodel.get',
                                                                                                                                    'vision_architectures/utils/custom_base_model.py'),
                                                              'vision_architectures.utils.custom_base_model.CustomBaseModel.validate': ( 'utils/custom_base_model.html#custombasemodel.validate',
                                                                                                                                         'vision_architectures/utils/custom_base_model.py'),
                                                              'vision_architectures.utils.custom_base_model.CustomBaseModel.validate_before': ( 'utils/custom_base_model.html#custombasemodel.validate_before',
                                                                                                                                                'vision_architectures/utils/custom_base_model.py')},
            'vision_architectures.utils.normalizations': { 'vision_architectures.utils.normalizations.DyT': ( 'utils/normalizations.html#dyt',
                                                                                                              'vision_architectures/utils/normalizations.py'),
                                                           'vision_architectures.utils.normalizations.DyT.__init__': ( 'utils/normalizations.html#dyt.__init__',
                                                                                                                       'vision_architectures/utils/normalizations.py'),
                                                           'vision_architectures.utils.normalizations.DyT.extra_repr': ( 'utils/normalizations.html#dyt.extra_repr',
                                                                                                                         'vision_architectures/utils/normalizations.py'),
                                                           'vision_architectures.utils.normalizations.DyT.forward': ( 'utils/normalizations.html#dyt.forward',
                                                                                                                      'vision_architectures/utils/normalizations.py'),
                                                           'vision_architectures.utils.normalizations.LayerNorm2D': ( 'utils/normalizations.html#layernorm2d',
                                                                                                                      'vision_architectures/utils/normalizations.py'),
                                                           'vision_architectures.utils.normalizations.LayerNorm2D.forward': ( 'utils/normalizations.html#layernorm2d.forward',
                                                                                                                              'vision_architectures/utils/normalizations.py'),
                                                           'vision_architectures.utils.normalizations.LayerNorm3D': ( 'utils/normalizations.html#layernorm3d',
                                                                                                                      'vision_architectures/utils/normalizations.py'),
                                                           'vision_architectures.utils.normalizations.LayerNorm3D.forward': ( 'utils/normalizations.html#layernorm3d.forward',
                                                                                                                              'vision_architectures/utils/normalizations.py'),
                                                           'vision_architectures.utils.normalizations.get_norm_layer': ( 'utils/normalizations.html#get_norm_layer',
                                                                                                                         'vision_architectures/utils/normalizations.py')},
            'vision_architectures.utils.rearrange': { 'vision_architectures.utils.rearrange.make_channels_first': ( 'utils/rearrange.html#make_channels_first',
                                                                                                                    'vision_architectures/utils/rearrange.py'),
                                                      'vision_architectures.utils.rearrange.make_channels_last': ( 'utils/rearrange.html#make_channels_last',
                                                                                                                   'vision_architectures/utils/rearrange.py'),
                                                      'vision_architectures.utils.rearrange.rearrange_channels': ( 'utils/rearrange.html#rearrange_channels',
                                                                                                                   'vision_architectures/utils/rearrange.py')},
            'vision_architectures.utils.residuals': { 'vision_architectures.utils.residuals.Residual': ( 'utils/residuals.html#residual',
                                                                                                         'vision_architectures/utils/residuals.py'),
                                                      'vision_architectures.utils.residuals.Residual.forward': ( 'utils/residuals.html#residual.forward',
                                                                                                                 'vision_architectures/utils/residuals.py'),
                                                      'vision_architectures.utils.residuals.StochasticDepthResidual': ( 'utils/residuals.html#stochasticdepthresidual',
                                                                                                                        'vision_architectures/utils/residuals.py'),
                                                      'vision_architectures.utils.residuals.StochasticDepthResidual.__init__': ( 'utils/residuals.html#stochasticdepthresidual.__init__',
                                                                                                                                 'vision_architectures/utils/residuals.py'),
                                                      'vision_architectures.utils.residuals.StochasticDepthResidual.extra_repr': ( 'utils/residuals.html#stochasticdepthresidual.extra_repr',
                                                                                                                                   'vision_architectures/utils/residuals.py'),
                                                      'vision_architectures.utils.residuals.StochasticDepthResidual.forward': ( 'utils/residuals.html#stochasticdepthresidual.forward',
                                                                                                                                'vision_architectures/utils/residuals.py'),
                                                      'vision_architectures.utils.residuals.add_stochastic_depth_dropout': ( 'utils/residuals.html#add_stochastic_depth_dropout',
                                                                                                                             'vision_architectures/utils/residuals.py'),
                                                      'vision_architectures.utils.residuals.remove_stochastic_depth_dropout': ( 'utils/residuals.html#remove_stochastic_depth_dropout',
                                                                                                                                'vision_architectures/utils/residuals.py')}}}
